package com.cvictory.javatest.cvictory.tools.unicode;

import java.io.UnsupportedEncodingException;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringEscapeUtils;

/**
 * @author cvictory ON 2017/10/30
 */
public class UnicodeConvert {
    /**
     * String 类型字符
     */
    private static String strs = "q测试工程ww0";
    /**
     * 位字节，以16位字符形式显示，如jvm的字节码
     */
    private static String bytes = "";

    /**
     * byte字节码
     *
     */
    private static byte[] byteArray = {-54, -2, -70, -66, 0, 0, 0, 49, 0, 117, 1, 0, 36, 115, 117, 110, 47, 114, 101, 102, 108, 101, 99, 116, 47, 71, 101, 110, 101, 114, 97, 116, 101, 100, 77, 101, 116, 104, 111, 100, 65, 99, 99, 101, 115, 115, 111, 114, 49, 7, 0, 1, 1, 0, 30, 115, 117, 110, 47, 114, 101, 102, 108, 101, 99, 116, 47, 77, 101, 116, 104, 111, 100, 65, 99, 99, 101, 115, 115, 111, 114, 73, 109, 112, 108, 7, 0, 3, 1, 0, 34, 99, 111, 109, 47, 97, 108, 105, 98, 97, 98, 97, 47, 115, 112, 114, 105, 110, 103, 47, 98, 111, 111, 116, 47, 116, 101, 115, 116, 106, 97, 118, 97, 47, 65, 7, 0, 5, 1, 0, 3, 102, 111, 111, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 12, 0, 7, 0, 8, 10, 0, 6, 0, 9, 1, 0, 6, 105, 110, 118, 111, 107, 101, 1, 0, 57, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 91, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 7, 0, 13, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 7, 0, 15, 1, 0, 28, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 67, 97, 115, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 17, 1, 0, 30, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 78, 117, 108, 108, 80, 111, 105, 110, 116, 101, 114, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 19, 1, 0, 34, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 73, 108, 108, 101, 103, 97, 108, 65, 114, 103, 117, 109, 101, 110, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 21, 1, 0, 43, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 114, 101, 102, 108, 101, 99, 116, 47, 73, 110, 118, 111, 99, 97, 116, 105, 111, 110, 84, 97, 114, 103, 101, 116, 69, 120, 99, 101, 112, 116, 105, 111, 110, 7, 0, 23, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 12, 0, 25, 0, 26, 10, 0, 20, 0, 27, 10, 0, 22, 0, 27, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 12, 0, 25, 0, 30, 10, 0, 22, 0, 31, 1, 0, 24, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 41, 86, 12, 0, 25, 0, 33, 10, 0, 24, 0, 34, 10, 0, 4, 0, 27, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 7, 0, 37, 1, 0, 8, 116, 111, 83, 116, 114, 105, 110, 103, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 12, 0, 39, 0, 40, 10, 0, 38, 0, 41, 1, 0, 4, 67, 111, 100, 101, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 17, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 66, 111, 111, 108, 101, 97, 110, 7, 0, 45, 1, 0, 4, 40, 90, 41, 86, 12, 0, 25, 0, 47, 10, 0, 46, 0, 48, 1, 0, 12, 98, 111, 111, 108, 101, 97, 110, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 90, 12, 0, 50, 0, 51, 10, 0, 46, 0, 52, 1, 0, 14, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 66, 121, 116, 101, 7, 0, 54, 1, 0, 4, 40, 66, 41, 86, 12, 0, 25, 0, 56, 10, 0, 55, 0, 57, 1, 0, 9, 98, 121, 116, 101, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 66, 12, 0, 59, 0, 60, 10, 0, 55, 0, 61, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 104, 97, 114, 97, 99, 116, 101, 114, 7, 0, 63, 1, 0, 4, 40, 67, 41, 86, 12, 0, 25, 0, 65, 10, 0, 64, 0, 66, 1, 0, 9, 99, 104, 97, 114, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 67, 12, 0, 68, 0, 69, 10, 0, 64, 0, 70, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 68, 111, 117, 98, 108, 101, 7, 0, 72, 1, 0, 4, 40, 68, 41, 86, 12, 0, 25, 0, 74, 10, 0, 73, 0, 75, 1, 0, 11, 100, 111, 117, 98, 108, 101, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 68, 12, 0, 77, 0, 78, 10, 0, 73, 0, 79, 1, 0, 15, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 70, 108, 111, 97, 116, 7, 0, 81, 1, 0, 4, 40, 70, 41, 86, 12, 0, 25, 0, 83, 10, 0, 82, 0, 84, 1, 0, 10, 102, 108, 111, 97, 116, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 70, 12, 0, 86, 0, 87, 10, 0, 82, 0, 88, 1, 0, 17, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 73, 110, 116, 101, 103, 101, 114, 7, 0, 90, 1, 0, 4, 40, 73, 41, 86, 12, 0, 25, 0, 92, 10, 0, 91, 0, 93, 1, 0, 8, 105, 110, 116, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 73, 12, 0, 95, 0, 96, 10, 0, 91, 0, 97, 1, 0, 14, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 76, 111, 110, 103, 7, 0, 99, 1, 0, 4, 40, 74, 41, 86, 12, 0, 25, 0, 101, 10, 0, 100, 0, 102, 1, 0, 9, 108, 111, 110, 103, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 74, 12, 0, 104, 0, 105, 10, 0, 100, 0, 106, 1, 0, 15, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 104, 111, 114, 116, 7, 0, 108, 1, 0, 4, 40, 83, 41, 86, 12, 0, 25, 0, 110, 10, 0, 109, 0, 111, 1, 0, 10, 115, 104, 111, 114, 116, 86, 97, 108, 117, 101, 1, 0, 3, 40, 41, 83, 12, 0, 113, 0, 114, 10, 0, 109, 0, 115, 0, 1, 0, 2, 0, 4, 0, 0, 0, 0, 0, 2, 0, 1, 0, 25, 0, 26, 0, 1, 0, 43, 0, 0, 0, 17, 0, 1, 0, 1, 0, 0, 0, 5, 42, -73, 0, 36, -79, 0, 0, 0, 0, 0, 1, 0, 11, 0, 12, 0, 2, 0, 43, 0, 0, 0, 102, 0, 5, 0, 3, 0, 0, 0, 66, 43, -57, 0, 11, -69, 0, 20, 89, -73, 0, 28, -65, 43, -64, 0, 6, 44, -66, 17, 0, 1, -97, 0, 11, -69, 0, 22, 89, -73, 0, 29, -65, 44, 17, 0, 0, 50, -64, 0, 14, -74, 0, 10, 1, -80, -73, 0, 42, -69, 0, 22, 90, 95, -73, 0, 32, -65, -69, 0, 24, 90, 95, -73, 0, 35, -65, 0, 3, 0, 12, 0, 40, 0, 45, 0, 18, 0, 12, 0, 40, 0, 45, 0, 20, 0, 40, 0, 43, 0, 57, 0, 16, 0, 0, 0, 44, 0, 0, 0, 4, 0, 1, 0, 24, 0, 0};

    public static void main(String[] args) throws UnsupportedEncodingException {
        System.out.println("---------------------start string convert to byte and byteHes-----------------------");
        byte[] strToByte = strs.getBytes("utf-8");
        System.out.println(strs + "       ---|  byte  |  byteHex  " );
        System.out.println(ArrayUtils.toString(strToByte));
        System.out.println(byteArrayToHexStr(strToByte));
        System.out.println("----------------------start byteHex convert to byte and String----------------------");
        System.out.println(bytes + "        ---|  byte  |  String  " );
        System.out.println(ArrayUtils.toString(convertByteFromByte16Str(bytes)));
        System.out.println(printToHex(bytes));

        System.out.println("----------------------start byteArray convert to byteHex and String----------------------");
        System.out.println(ArrayUtils.toString(byteArray) + "        ---|  byteHex  |  String  " );
        System.out.println(byteArrayToHexStr(byteArray));
        //System.out.println(new String(byteArray));
        System.out.println("----------------------end----------------------");
    }

    private static byte[] convertByteFromByte16Str(String source){
        int s = 0;
        byte[] r = new byte[source.length() / 2];
        StringBuilder sb = new StringBuilder();
        for(char i : source.toCharArray()){
            ++s;
            sb.append(i);
            if(s % 2 == 0){
                r [(s / 2) -1 ] = Byte.parseByte(sb.toString(), 16);
                sb = new StringBuilder();
            }
        }
        return r;
    }

    private static String printToHex(String source){

        return new String(convertByteFromByte16Str(source));
    }

    public static String byteArrayToHexStr(byte[] byteArray) {
        if (byteArray == null){
            return null;
        }
        char[] hexArray = "0123456789ABCDEF".toCharArray();
        char[] hexChars = new char[byteArray.length * 2];
        for (int j = 0; j < byteArray.length; j++) {
            int v = byteArray[j] & 0xFF;
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        }
        return new String(hexChars);
    }

}
